---

---

<style>
  @font-face {
    font-family: monogram;
    src: url(monogram.ttf);
  }

  body {
    font-family: monogram, monospace;
    font-size: 2rem;
  }

  #app {
    width: 100vw;
    height: 100vh;
    position: relative;
  }

  #textbox {
    position: absolute;
    left: 10%;
    right: 10%;
    bottom: 2vh;
    min-height: 10vh;
    background: white;
    border-radius: 3px;
    outline-style: solid;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    justify-content: flex-start;
    align-items: flex-start;
    word-spacing: 0.2rem;
    filter: drop-shadow(0 0 0.75rem rgb(112, 112, 112));
    /* overflow: auto; */
  }

  .ui-text {
    margin: 0;
    user-select: none;
  }

  .ui-close-btn {
    font-family: monogram, monospace;
    border-style: none;
    border-radius: 3px;
    padding: 1rem;
    font-size: inherit;
  }

  .btn-container {
    align-self: flex-end;
    margin-top: 1rem;
  }

  .note {
    position: absolute;
    left: 5%;
    top: 1vh;
    display: flex;
    flex-direction: column;
    color: rgb(238, 238, 238);
  }
</style>
<div id="app">
  <div>
    <p class="note">Tap/Click around to move</p>

    <div id="textbox-container" style="display: none">
      <div id="textbox">
        <p id="dialogue" class="ui-text"></p>
        <div class="btn-container">
          <button id="close" class="ui-close-btn">Close</button>
        </div>
      </div>
    </div>
  </div>
  <canvas id="game"></canvas>
</div>
<script>
  import kaboom from "kaboom"

  import { dialogueData, scaleFactor } from "./constants"
  import { displayDialogue, setCamScale } from "./utils"

  // initialize kaboom context
  const k = kaboom({
    global: false,
    touchToMouse: true,
    canvas: document.getElementById("game") as HTMLCanvasElement,
    debug: false, // set to false once ready for production
  })

  k.loadSprite("spritesheet", "/spritesheet.png", {
    sliceX: 39,
    sliceY: 31,
    anims: {
      "idle-down": 936,
      "walk-down": { from: 936, to: 939, loop: true, speed: 8 },
      "idle-side": 975,
      "walk-side": { from: 975, to: 978, loop: true, speed: 8 },
      "idle-up": 1014,
      "walk-up": { from: 1014, to: 1017, loop: true, speed: 8 },
    },
  })

  k.loadSprite("map", "/map.png")

  k.setBackground(k.Color.fromHex("#311047"))

  k.scene("main", async () => {
    const mapData = await (await fetch("./map.json")).json()
    const layers = mapData.layers

    const map = k.add([k.sprite("map"), k.pos(0), k.scale(scaleFactor)])

    const player = k.make([
      k.sprite("spritesheet", { anim: "idle-down" }),
      k.area({
        shape: new k.Rect(k.vec2(0, 3), 10, 10),
      }),
      k.body(),
      k.anchor("center"),
      k.pos(),
      k.scale(scaleFactor),
      {
        speed: 250,
        direction: "down",
        isInDialogue: false,
      },
      "player",
    ])

    for (const layer of layers) {
      if (layer.name === "boundaries") {
        for (const boundary of layer.objects) {
          map.add([
            k.area({
              shape: new k.Rect(k.vec2(0), boundary.width, boundary.height),
            }),
            k.body({ isStatic: true }),
            k.pos(boundary.x, boundary.y),
            boundary.name,
          ])

          if (boundary.name) {
            player.onCollide(boundary.name, () => {
              player.isInDialogue = true
              // @ts-ignore
              displayDialogue(dialogueData[boundary.name], () => (player.isInDialogue = false))
            })
          }
        }

        continue
      }

      if (layer.name === "spawnpoints") {
        for (const entity of layer.objects) {
          if (entity.name === "player") {
            player.pos = k.vec2((map.pos.x + entity.x) * scaleFactor, (map.pos.y + entity.y) * scaleFactor)
            k.add(player)
            continue
          }
        }
      }
    }

    setCamScale(k)

    k.onResize(() => {
      setCamScale(k)
    })

    k.onUpdate(() => {
      k.camPos(player.worldPos().x, player.worldPos().y - 100)
    })

    k.onMouseDown(mouseBtn => {
      if (mouseBtn !== "left" || player.isInDialogue) return

      const worldMousePos = k.toWorld(k.mousePos())
      player.moveTo(worldMousePos, player.speed)

      const mouseAngle = player.pos.angle(worldMousePos)

      const lowerBound = 50
      const upperBound = 125

      if (mouseAngle > lowerBound && mouseAngle < upperBound && player.curAnim() !== "walk-up") {
        player.play("walk-up")
        player.direction = "up"
        return
      }

      if (mouseAngle < -lowerBound && mouseAngle > -upperBound && player.curAnim() !== "walk-down") {
        player.play("walk-down")
        player.direction = "down"
        return
      }

      if (Math.abs(mouseAngle) > upperBound) {
        player.flipX = false
        if (player.curAnim() !== "walk-side") player.play("walk-side")
        player.direction = "right"
        return
      }

      if (Math.abs(mouseAngle) < lowerBound) {
        player.flipX = true
        if (player.curAnim() !== "walk-side") player.play("walk-side")
        player.direction = "left"
        return
      }
    })

    function stopAnims() {
      if (player.direction === "down") {
        player.play("idle-down")
        return
      }
      if (player.direction === "up") {
        player.play("idle-up")
        return
      }

      player.play("idle-side")
    }

    k.onMouseRelease(stopAnims)

    k.onKeyRelease(() => {
      stopAnims()
    })
    k.onKeyDown(key => {
      const keyMap = [k.isKeyDown("right"), k.isKeyDown("left"), k.isKeyDown("up"), k.isKeyDown("down")]

      let nbOfKeyPressed = 0
      for (const key of keyMap) {
        if (key) {
          nbOfKeyPressed++
        }
      }

      if (nbOfKeyPressed > 1) return

      if (player.isInDialogue) return
      if (keyMap[0]) {
        player.flipX = false
        if (player.curAnim() !== "walk-side") player.play("walk-side")
        player.direction = "right"
        player.move(player.speed, 0)
        return
      }

      if (keyMap[1]) {
        player.flipX = true
        if (player.curAnim() !== "walk-side") player.play("walk-side")
        player.direction = "left"
        player.move(-player.speed, 0)
        return
      }

      if (keyMap[2]) {
        if (player.curAnim() !== "walk-up") player.play("walk-up")
        player.direction = "up"
        player.move(0, -player.speed)
        return
      }

      if (keyMap[3]) {
        if (player.curAnim() !== "walk-down") player.play("walk-down")
        player.direction = "down"
        player.move(0, player.speed)
      }
    })
  })

  k.go("main")
</script>
